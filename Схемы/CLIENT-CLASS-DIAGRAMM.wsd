@startuml
skinparam linetype ortho
skinparam monochrome true

package "JavaFX Client" {

  class MainApp {
    - primaryStage: Stage
    - sceneManager: SceneManager
    - apiClient: RestApiClient
    + start(primaryStage: Stage): void
  }

  class SceneManager {
    - scenes: Map<String, Scene>
    + registerScene(name: String, fxml: String): void
    + switchScene(name: String): void
  }

  class RestApiClient {
    - baseUrl: String
    - jwtToken: String
    + authenticate(request: AuthRequestDTO): AuthResponseDTO
    + register(request: RegistrationDTO): UserDTO
    + changePassword(request: ChangePasswordDTO): void
    + getModels(): List<ModelDTO>
    + saveModel(model: ModelDTO): ModelDTO
    + getDocuments(): List<DocumentDTO>
    + uploadDocument(doc: DocumentDTO): DocumentDTO
    + getSavedReports(): List<ReportDTO>
    + deleteReports(ids: List<Long>): void
    + downloadReport(id: Long): File
    + runCalculation(request: CalculationRequestDTO): CalculationResultDTO
    + runSimulation(request: SimulationRequestDTO): SimulationResultDTO
    + getComparison(modelId: Long): ComparisonDTO
    + setJwtToken(token: String): void
  }

  class JsonUtil {
    + toJson(obj: Object): String
    + fromJson(json: String, cls: Class<T>): T
  }

  class Mapper {
    + toDTO(entity: Object): Object
    + toEntity(dto: Object): Object
  }

  package Controllers {
    abstract class BaseController {
      # apiClient: RestApiClient
      # mapper: Mapper
      + initialize(): void
    }

    class LoginController {
      + onLogin(): void
    }
    class RegistrationController {
      + onRegister(): void
    }
    class ChangePasswordController {
      + onSubmitNewPassword(): void
    }
    class DashboardController {
      + showDashboard(): void
    }
    class ModelListController {
      + loadModels(): void
      + onSelectModel(id: Long): void
      + onAddModel(): void
    }
    class ModelEditController {
      + onAddParameter(): void
      + onRemoveParameter(paramId: Long): void
      + onSave(): void
    }
    class CalculationController {
      + onRunCalculation(): void
      + displayResults(result: CalculationResultDTO): void
    }
    class SavedReportsController {
      + loadReports(): void
      + onDeleteSelected(ids: List<Long>): void
      + onDownload(id: Long): void
    }
    class SavedDocumentsController {
      + loadDocuments(): void
      + onSelectDocument(id: Long): void
      + onAddDocument(): void
      + onDeleteSelected(ids: List<Long>): void
    }
    class ComparisonController {
      + loadComparison(modelId: Long): void
      + displayComparison(data: ComparisonDTO): void
      + onSaveReport(): void
    }
    class SimulationController {
      + onUploadReport(): void
      + onRunSimulation(): void
      + displaySimulationResults(result: SimulationResultDTO): void
    }
  }

  package DTO {
    class AuthRequestDTO     { 
      username: String
      password: String 
    }
    class AuthResponseDTO    {
      jwtToken: String
      expiresAt: Timestamp 
    }
    class RegistrationDTO    {
      username: String
      email: String
      password: String 
    }
    class ChangePasswordDTO  {
      token: String
      newPassword: String 
    }
    class UserDTO            { 
      id: Long
      username: String
      email: String 
    }
    class ModelDTO           {
      id: Long
      name: String
      description: String
      parameters: List<ParameterDTO> 
    }
    class ParameterDTO       {
       name: String
      value: Double
    }
    class CalculationRequestDTO  {
      modelId: Long
      parameters: List<ParameterDTO> 
    }
    class CalculationResultDTO   {
      result: Map<String, Double>
      createdAt: Timestamp 
    }
    class SimulationRequestDTO   { 
      simulationType: String 
      parameters: List<ParameterDTO> 
    }
    class SimulationResultDTO    { 
      forecastData: Map<String, Double> 
      createdAt: Timestamp 
    }
    class DocumentDTO         { 
      id: Long 
      name: String 
      uploadDate: LocalDate 
      filePath: String 
    }
    class ReportDTO           { 
      id: Long 
      name: String 
      creationDate: LocalDate 
      modelType: String 
    }
    class ComparisonDTO       { 
      idealResults: Map<String, Double> 
      realResults: Map<String, Double> 
    }
    class AIAnalysisResultDTO { 
      analysisId: Long 
      extractedData: JSON 
    }
  }
}

'--- Связи ---
MainApp               --> SceneManager
MainApp               --> RestApiClient

SceneManager          --> LoginController
SceneManager          --> RegistrationController
SceneManager          --> ChangePasswordController
SceneManager          --> DashboardController
SceneManager          --> ModelListController
SceneManager          --> ModelEditController
SceneManager          --> CalculationController
SceneManager          --> SavedReportsController
SceneManager          --> SavedDocumentsController
SceneManager          --> ComparisonController
SceneManager          --> SimulationController

BaseController        <|-- LoginController
BaseController        <|-- RegistrationController
BaseController        <|-- ChangePasswordController
BaseController        <|-- DashboardController
BaseController        <|-- ModelListController
BaseController        <|-- ModelEditController
BaseController        <|-- CalculationController
BaseController        <|-- SavedReportsController
BaseController        <|-- SavedDocumentsController
BaseController        <|-- ComparisonController
BaseController        <|-- SimulationController

LoginController       --> RestApiClient
RegistrationController--> RestApiClient
ChangePasswordController --> RestApiClient
DashboardController   --> RestApiClient
ModelListController   --> RestApiClient
ModelEditController   --> RestApiClient
CalculationController --> RestApiClient
SavedReportsController--> RestApiClient
SavedDocumentsController --> RestApiClient
ComparisonController  --> RestApiClient
SimulationController  --> RestApiClient

RestApiClient         --> JsonUtil
"Controllers"         --> Mapper
Mapper                --> "DTO"
