@startuml
skinparam linetype ortho

actor Пользователь
cloud "Внешние AI сервисы" as AI
cloud "File Storage\n(S3/FS)" as FS

rectangle Клиентский_слой {
  component "JavaFX клиент" as Client
  component "WebSocket клиент" as WSClient
}

rectangle Серверный_слой {
  component "REST API\n(Spring Web)" as REST
  component "Spring Security\n(авторизация, JWT)" as Security
  component "Spring Session\n(управление сессиями)" as Session
  component "Spring Services\n(бизнес-логика)" as Services
  component "Simulation Engine\n(Spring Batch / @Async)" as Engine
  component "Spring Cache\n(Ehcache/Redis)" as Cache
  component "Spring Mail\n(подтверждение email)" as Mail
  component "Spring Actuator\n(metrics, health)" as Actuator
}

database "PostgreSQL\n(модели, расчёты, отчёты)" as DB
artifact "Redis\n(кеш, сессии)" as Redis

'— Пользователь и клиент
Пользователь --> Client : UI
Client --> REST : HTTP/JSON 
Client --> WSClient : WebSocket

'— Безопасность и сессии
REST --> Security
REST --> Session

'— Основная логика
REST --> Services
Services --> Engine : запуск фоновых задач
Engine --> DB : сохранение результатов
Engine --> Cache : кеширование
Services --> AI : REST API
Services --> FS : хранение док-тов, отчётов
Services --> Mail : отправка писем
Services --> Actuator : мониторинг
Services --> DB

'— Сессии/кеш
Session --> Redis
Services --> Cache

@enduml
