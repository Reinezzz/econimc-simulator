@startuml
'===========================================================
' Настройки для печати на A4 (альбомная ориентacja)
'===========================================================
skinparam dpi 200
skinparam pageWidth 29.7cm
skinparam pageHeight 21cm
skinparam pageMargin 1cm

skinparam linetype ortho
skinparam componentStyle rectangle
left to right direction

'===========================================================
' 1. Controller Layer (не более 5 классов в строке)
'===========================================================
package "Controller Layer (REST API)" {
  ' Первая строка
  class AuthController {
    + login(AuthRequestDTO): AuthResponseDTO
    + register(RegistrationDTO): UserDTO
    + refreshToken(RefreshTokenDTO): AuthResponseDTO
  }
  class ModelController {
    + createModel(ModelDTO): ModelDTO
    + getModel(Long): ModelDTO
    + listModels(): List<ModelDTO>
  }
  class CalculationController {
    + calculate(CalculationRequestDTO): CalculationResultDTO
    + getHistory(): List<CalculationResultDTO>
  }
  class ReportController {
    + listReports(): List<ReportDTO>
    + downloadReport(Long): File
    + deleteReports(List<Long>): void
    + createReport(ReportDTO): ReportDTO
  }
  class DocumentController {
    + listDocuments(): List<DocumentDTO>
    + uploadDocument(DocumentDTO): DocumentDTO
    + deleteDocuments(List<Long>): void
  }

  ' Вторая строка
  class ComparisonController {
    + getComparison(Long): ComparisonDTO
    + listComparisons(): List<ComparisonDTO>
    + saveComparison(ComparisonDTO): ComparisonDTO
    + deleteComparison(Long): void
  }
  class SimulationController {
    + runSimulation(SimulationRequestDTO): SimulationResultDTO
    + getStatus(UUID): SimulationStatusDTO
    + cancelSimulation(UUID): void
  }
}

'===========================================================
' 2. Service Layer (не более 5 элементов в строке)
'===========================================================
package "Service Layer" {
  interface AuthService {
    + authenticate(String,String): String
    + register(RegistrationDTO): User
    + refreshToken(String): String
  }
  interface UserDetailsService {
    + loadUserByUsername(String): UserDetails
  }
  class ModelService {
    + createModel(ModelDTO, User): Model
    + getModel(Long, User): Model
    + listModels(User): List<Model>
  }
  class CalculationService {
    + performCalculation(Long, Map<String,Double>): CalculationResult
    + getHistory(User): List<CalculationResult>
  }
  class ReportService {
    + getReports(User): List<Report>
    + downloadReport(Long): File
    + deleteReports(List<Long>): void
    + saveReport(Report): Report
  }

  class DocumentService {
    + getDocuments(User): List<Document>
    + uploadDocument(Document): Document
    + deleteDocuments(List<Long>): void
  }
  class ComparisonService {
    + getComparison(Long, User): Comparison
    + listComparisons(User): List<Comparison>
    + saveComparison(Comparison): Comparison
    + deleteComparison(Long, User): void
  }
  class SimulationService {
    + performSimulation(SimulationRequestDTO, User): SimulationResult
    + getStatus(UUID): SimulationStatus
    + cancelSimulation(UUID, User): void
  }
  class AIService {
    + analyzeModelDocument(File): ModelAnalysisResult
    + analyzeReport(File): ReportAnalysisResult
    + analyzeSimulation(File): SimulationAnalysisResult
  }
  class MapperService {
    + toDTO(Entity): DTO
    + toEntity(DTO): Entity
  }
  class ExceptionHandler {
    + handleAll(Exception): ResponseEntity<ErrorDTO>
  }
}

'===========================================================
' 3. Repository Layer (две строки по пять)
'===========================================================
package "Repository Layer" {
  interface UserRepository {
    + findByUsername(String): Optional<User>
  }
  interface ModelRepository {
    + findById(Long): Optional<Model>
    + findByUser(User): List<Model>
  }
  interface CalculationRepository {
    + save(CalculationResult): CalculationResult
    + findByUser(User): List<CalculationResult>
  }
  interface ReportRepository {
    + save(Report): Report
    + findByUser(User): List<Report>
  }
  interface DocumentRepository {
    + save(Document): Document
    + findByUser(User): List<Document>
  }

  interface ComparisonRepository {
    + save(Comparison): Comparison
    + findByModelAndUser(Long,User): Optional<Comparison>
    + findByUser(User): List<Comparison>
    + deleteByIdAndUser(Long,User): void
  }
  interface SimulationRepository {
    + save(SimulationResult): SimulationResult
    + findByUser(User): List<SimulationResult>
    + deleteByIdAndUser(UUID,User): void
  }
  interface ModelAnalysisRepository {
    + save(ModelAnalysis): ModelAnalysis
    + findByModel(Long): List<ModelAnalysis>
  }
  interface ReportAnalysisRepository {
    + save(ReportAnalysis): ReportAnalysis
    + findByReport(Long): List<ReportAnalysis>
  }
  interface SimulationAnalysisRepository {
    + save(SimulationAnalysis): SimulationAnalysis
    + findBySimulation(UUID): List<SimulationAnalysis>
  }
}

'===========================================================
' 4. Domain Entities (по пять в строке)
'===========================================================
package "Domain Entities" {
  ' Первая строка
  class User {
    id: Long
    username: String
    passwordHash: String
    email: String
    createdAt: Timestamp
  }
  class Model {
    id: Long
    user: User
    name: String
    description: String
    parameters: List<Parameter>
  }
  class Parameter {
    id: Long
    name: String
    value: Double
  }
  class CalculationResult {
    id: Long
    model: Model
    results: Map<String,Double>
    createdAt: Timestamp
  }
  class Report {
    id: Long
    user: User
    model: Model
    type: String
    name: String
    filePath: String
    createdAt: Timestamp
  }

  ' Вторая строка
  class Document {
    id: Long
    user: User
    model: Model
    simulation: SimulationResult
    type: String
    filePath: String
    uploadedAt: Timestamp
  }
  class Comparison {
    id: Long
    user: User
    model: Model
    report: Report
    idealData: JSON
    realData: JSON
    createdAt: Timestamp
  }
  class SimulationResult {
    id: UUID
    user: User
    type: SimulationType
    inputData: JSON
    resultData: JSON
    createdAt: Timestamp
  }
  class SimulationType {
    id: Long
    name: String
  }
  class ModelAnalysis {
    id: Long
    model: Model
    analysisType: String
    resultData: JSON
    createdAt: Timestamp
  }

  ' Третья строка
  class ReportAnalysis {
    id: Long
    report: Report
    analysisType: String
    resultData: JSON
    createdAt: Timestamp
  }
  class SimulationAnalysis {
    id: Long
    simulation: SimulationResult
    analysisType: String
    resultData: JSON
    createdAt: Timestamp
  }
}

'===========================================================
' 5. DTO Classes (разбито на четыре ряда)
'===========================================================
package "DTO Classes" {
  ' Ряд 1
  class AuthRequestDTO {
    username: String
    password: String
  }
  class AuthResponseDTO {
    jwtToken: String
    expiresAt: Timestamp
  }
  class RegistrationDTO {
    username: String
    email: String
    password: String
  }
  class RefreshTokenDTO {
    refreshToken: String
  }
  class ChangePasswordDTO {
    token: String
    newPassword: String
  }

  ' Ряд 2
  class UserDTO {
    id: Long
    username: String
    email: String
  }
  class ModelDTO {
    id: Long
    name: String
    description: String
    parameters: List<ParameterDTO>
  }
  class ParameterDTO {
    name: String
    value: Double
  }
  class CalculationRequestDTO {
    modelId: Long
    parameters: List<ParameterDTO>
  }
  class CalculationResultDTO {
    calculationId: Long
    results: Map<String,Double>
    createdAt: Timestamp
  }

  ' Ряд 3
  class ReportDTO {
    id: Long
    modelId: Long
    type: String
    name: String
    filePath: String
    createdAt: Timestamp
  }
  class DocumentDTO {
    id: Long
    modelId: Long
    simulationId: UUID
    type: String
    filePath: String
    uploadedAt: Timestamp
  }
  class ComparisonDTO {
    id: Long
    modelId: Long
    reportId: Long
    idealData: JSON
    realData: JSON
    createdAt: Timestamp
  }
  class SimulationRequestDTO {
    simulationType: String
    parameters: List<ParameterDTO>
  }
  class SimulationResultDTO {
    simulationId: UUID
    resultData: Map<String,Double>
    createdAt: Timestamp
  }

  ' Ряд 4
  class SimulationStatusDTO {
    simulationId: UUID
    status: String
  }
  class ModelAnalysisResultDTO {
    analysisId: Long
    analysisType: String
    resultData: JSON
    createdAt: Timestamp
  }
  class ReportAnalysisResultDTO {
    analysisId: Long
    analysisType: String
    resultData: JSON
    createdAt: Timestamp
  }
  class SimulationAnalysisResultDTO {
    analysisId: Long
    analysisType: String
    resultData: JSON
    createdAt: Timestamp
  }
  class ErrorDTO {
    code: String
    message: String
  }
}

'--- Взаимосвязи Controller → Service
AuthController      --> AuthService
ModelController     --> ModelService
CalculationController --> CalculationService
ReportController    --> ReportService
DocumentController  --> DocumentService
ComparisonController --> ComparisonService
SimulationController --> SimulationService

' Service → Repository
AuthService        --> UserRepository
ModelService       --> ModelRepository
CalculationService --> CalculationRepository
ReportService      --> ReportRepository
DocumentService    --> DocumentRepository
ComparisonService  --> ComparisonRepository
SimulationService  --> SimulationRepository
AIService          --> ModelAnalysisRepository
AIService          --> ReportAnalysisRepository
AIService          --> SimulationAnalysisRepository

' AIService → External AI
AIService          --> AI_API

' MapperService → Entities & DTOs
MapperService      --> "Domain Entities"
MapperService      --> "DTO Classes"
@enduml
